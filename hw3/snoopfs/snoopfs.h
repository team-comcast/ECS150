/*
 * Copyright (c) 1997-2005 Erez Zadok <ezk@cs.stonybrook.edu>
 * Copyright (c) 2001-2005 Stony Brook University
 *
 * For specific licensing information, see the COPYING file distributed with
 * this package, or get one from ftp://ftp.filesystems.org/pub/fistgen/COPYING.
 *
 * This Copyright notice must be kept intact and distributed with all
 * fistgen sources INCLUDING sources generated by fistgen.
 */
#ifndef __SNOOPFS_H_
#define	__SNOOPFS_H_

/*
 * Copyright (c) 1992, 1993
 *      The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software donated to Berkeley by
 * Jan-Simon Pendry.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the University of
 *      California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *      @(#)snoopfs.h    8.3 (Berkeley) 8/20/94
 *
 * $Id: snoopfs.h,v 1.11 2005/01/03 21:10:41 ezk Exp $
 */

struct snoopfs_args {
  char *target;			/* Target of loopback  */
};


#ifdef _KERNEL

/* per-vfs private date */
struct snoopfs_mount {
  struct mount *snoopfsm_vfs;
  struct vnode *snoopfsm_rootvp;	/* Reference to root snoopfs_node */
  /* additional per-vfs BDTs */
  ;
};

/*
 * A cache of vnode references
 * (This is a private structure per vnode->v_data)
 */
struct snoopfs_node {

  LIST_ENTRY(snoopfs_node) snoopfs_hash; /* Hash list */
  struct vnode *snoopfs_lowervp; /* VREFed once */
  struct vnode *snoopfs_vnode;	/* Back pointer */
};

extern int snoopfs_init (struct vfsconf *vfsp);
extern int snoopfs_uninit(struct vfsconf *vfsp);
extern int snoopfs_nodeget(struct mount *mp, struct vnode *target, struct vnode **vpp);
void snoopfs_hashrem(struct snoopfs_node *xp);
int snoopfs_bypass(struct vop_generic_args *ap);


/*
 * Flags for snoopfs_{en,de}code_filename
 * DO_DOTS means the special entries . and .. should be encoded (for symlink)
 * SKIP_DOTS means they should be preserved intact
 */
#define DO_DOTS   0
#define SKIP_DOTS 1

#define MAXNAMLEN	255	/* as per POSIX */

#define	MOUNT_TO_SNOOPFS_MOUNT(mp) ((struct snoopfs_mount *)((mp)->mnt_data))
#define	VP_TO_SNOOPFS(vp) ((struct snoopfs_node *)(vp)->v_data)
#define	SNOOPFS_TO_VP(xp) ((xp)->snoopfs_vnode)
#ifdef DIAGNOSTIC
extern struct vnode *snoopfs_checkvp (struct vnode * vp, char *fil, int lno);
# define SNOOPFS_VP_TO_LOWERVP(vp) snoopfs_checkvp((vp), __FILE__, __LINE__)
#else
# define SNOOPFS_VP_TO_LOWERVP(vp) (VP_TO_SNOOPFS(vp)->snoopfs_lowervp)
#endif /* DIAGNOSTIC */


#ifdef MALLOC_DECLARE
MALLOC_DECLARE(M_SNOOPFSNODE);
#endif

#define vfs2priv(x)	MOUNT_TO_SNOOPFS_MOUNT(x)
#define vnode2lower(x)	SNOOPFS_VP_TO_LOWERVP(x)
#define dir2lower(x)	SNOOPFS_VP_TO_LOWERVP(x)

#define CRED()	curproc->p_cred->pc_ucred
#define printk	printf

/* simpler macros for using with file name encoding */
#define CNP_VARS
#define CNP_BEFORE(x)
#define CNP_AFTER(x)

extern int snoopfs_bypass (struct vop_generic_args * ap);
extern vop_t **snoopfs_vnodeop_p;
extern struct lock snoopfs_hashlock;

/* XXX: EZK hacky stuff I have to do rather than change system headers */
typedef struct vnode vnode_t;
typedef struct vattr vattr_t;
typedef struct uio uio_t;
typedef struct iovec iovec_t;
typedef struct ucred cred_t;
typedef struct thread thread_t;
typedef struct mount vfs_t;
typedef struct componentname cn_t;
typedef struct componentname pathname_t;

#define	MIN(a,b)		(((a)<(b))?(a):(b))
#define	MAX(a,b)		(((a)>(b))?(a):(b))
#define VT_SNOOPFS		VT_NULL
#define MOUNT_SNOOPFS		MOUNT_NULL

#define kmem_alloc(size)	malloc((size), M_SNOOPFSNODE, M_WAITOK)
#define kmem_free(addr)		free((addr), M_TEMP)


extern int snoopfs_decode_block(const char *from, char *to, int len, const vnode_t *vp, const vfs_t *vfsp, u_long pagenum);
extern int snoopfs_encode_block(const char *from, char *to, int len, const vnode_t *vp, const vfs_t *vfsp, u_long pagenum);
extern void *kmem_zalloc(unsigned long size);
extern int fist_uiomove(caddr_t cp, int n, enum uio_rw rwflag, struct uio *uio);
extern int snoopfs_verify_lower_object(vnode_t *vp, cred_t *cred, thread_t *p, char *fxn);

extern cn_t *snoopfs_new_cnp(const vnode_t *thisvp, const cn_t *cnp);
extern void snoopfs_update_cnp(const vnode_t *thisvp, cn_t **lowercnpp, cn_t *thiscnp, int error);
extern int snoopfs_fill_zeros(vnode_t *vp, vattr_t *vap, cred_t * cred, thread_t * p);
extern void snoopfs_fill_page(vnode_t *vp, char *buf, long long offset);
extern char *fist_cn_flags(u_long flags);


struct freelist {
  long	spare0;
  struct malloc_type *type;
  long	spare1;
  caddr_t	next;
};
#define WEIRD_ADDR 0xdeadc0de
extern int fist_isdeadcode(void *addr);


# define fist_dprint(level, format, args...)
# define print_location()
# define fist_print_vnode(a, b)
# define fist_print_vfs(a, b)
# define fist_print_uio(a, b)
# define fist_print_uios(a, b)
# define fist_print_uap(a, b)
# define fist_print_page(a, b)
# define fist_print_cn(a, b)
# define ASSERT(e)



/* auto-generated extern definitions */

/* auto-generated externs */
extern uid_t fist_getattr_owner(vnode_t *vp, cred_t *cr);


#endif /* _KERNEL */

/*
 * Definitions for user and kernel code
 */
#define memset(arg, val, len) bzero(arg, len)

/* ioctls */


#endif /* not __SNOOPFS_H_ */
